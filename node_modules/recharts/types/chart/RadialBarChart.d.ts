/// <reference types="react" />
export declare const RadialBarChart: {
    new (props: import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps): {
        uniqueChartId: string;
        clipPathId: string;
        cancelDefer: import("recharts/types/util/deferer").CancelFunction;
        accessibilityManager: import("recharts/types/chart/AccessibilityManager").AccessibilityManager;
        container?: HTMLElement;
        componentDidMount(): void;
        getSnapshotBeforeUpdate(prevProps: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>, prevState: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState>): null;
        componentDidUpdate(prevProps: import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps): void;
        componentWillUnmount(): void;
        cancelThrottledTriggerAfterMouseMove(): void;
        getTooltipEventType(): import("recharts/types/util/types").TooltipEventType;
        getMouseInfo(event: import("react").MouseEvent<Element, MouseEvent> | import("react").Touch): {
            xValue: any;
            yValue: any;
            chartX: number;
            chartY: number;
        } | {
            activeTooltipIndex: number;
            activeLabel: any;
            activePayload: any[];
            activeCoordinate: import("recharts/types/util/types").ChartCoordinate;
            chartX: number;
            chartY: number;
        };
        inRange(x: number, y: number, scale?: number): any;
        parseEventsOfWrapper(): any;
        addListener(): void;
        removeListener(): void;
        clearDefer: () => void;
        handleLegendBBoxUpdate: (box: DOMRect) => void;
        handleReceiveSyncEvent: (cId: string | number, chartId: string, data: import("recharts/types/chart/generateCategoricalChart").CategoricalChartState) => void;
        handleBrushChange: ({ startIndex, endIndex }: {
            startIndex: number;
            endIndex: number;
        }) => void;
        handleMouseEnter: (e: import("react").MouseEvent<Element, MouseEvent>) => void;
        triggeredAfterMouseMove: (e: import("react").MouseEvent<Element, MouseEvent>) => any;
        handleItemMouseEnter: (el: any) => void;
        handleItemMouseLeave: () => void;
        handleMouseMove: (e: any) => void;
        handleMouseLeave: (e: any) => void;
        handleOuterEvent: (e: import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element>) => void;
        handleClick: (e: import("react").MouseEvent<Element, MouseEvent>) => void;
        handleMouseDown: (e: import("react").MouseEvent<Element, MouseEvent> | import("react").Touch) => void;
        handleMouseUp: (e: import("react").MouseEvent<Element, MouseEvent> | import("react").Touch) => void;
        handleTouchMove: (e: import("react").TouchEvent<Element>) => void;
        handleTouchStart: (e: import("react").TouchEvent<Element>) => void;
        handleTouchEnd: (e: import("react").TouchEvent<Element>) => void;
        triggerSyncEvent(data: import("recharts/types/chart/generateCategoricalChart").CategoricalChartState): void;
        applySyncEvent(data: import("recharts/types/chart/generateCategoricalChart").CategoricalChartState): void;
        verticalCoordinatesGenerator: ({ xAxis, width, height, offset }: import("recharts/types/util/types").ChartCoordinate, syncWithTicks: Boolean) => number[];
        horizontalCoordinatesGenerator: ({ yAxis, width, height, offset }: import("recharts/types/util/types").ChartCoordinate, syncWithTicks: Boolean) => number[];
        axesTicksGenerator: (axis?: any) => import("recharts/types/util/types").TickItem[];
        filterFormatItem(item: any, displayName: any, childIndex: any): any;
        renderCursor: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>) => import("react").FunctionComponentElement<any> | import("react").DetailedReactHTMLElement<{
            payload: any[];
            payloadIndex: number;
            key: string | number;
            className: string;
            xAxis?: any;
            yAxis?: any;
            width?: any;
            height?: any;
            offset?: import("recharts/types/util/types").ChartOffset;
            angle?: number;
            radius?: number;
            cx?: number;
            cy?: number;
            startAngle?: number;
            endAngle?: number;
            innerRadius?: number;
            outerRadius?: number;
            x: number;
            y: number;
            top?: number;
            bottom?: number;
            left?: number;
            right?: number;
            brushBottom?: number;
            stroke: string;
            pointerEvents: string;
        } | {
            payload: any[];
            payloadIndex: number;
            key: string | number;
            className: string;
            stroke: string;
            fill: string;
            x: number;
            y: number;
            width: number;
            height: number;
            top?: number;
            bottom?: number;
            left?: number;
            right?: number;
            brushBottom?: number;
            pointerEvents: string;
        } | {
            payload: any[];
            payloadIndex: number;
            key: string | number;
            className: string;
            cx: number;
            cy: number;
            startAngle: number;
            endAngle: number;
            innerRadius: number;
            outerRadius: number;
            top?: number;
            bottom?: number;
            left?: number;
            right?: number;
            width?: number;
            height?: number;
            brushBottom?: number;
            stroke: string;
            pointerEvents: string;
        } | {
            payload: any[];
            payloadIndex: number;
            key: string | number;
            className: string;
            points: import("recharts/types/util/cursor/getRadialCursorPoints").RadialCursorPoints | [import("recharts/types/util/types").Coordinate, import("recharts/types/util/types").Coordinate];
            top?: number;
            bottom?: number;
            left?: number;
            right?: number;
            width?: number;
            height?: number;
            brushBottom?: number;
            stroke: string;
            pointerEvents: string;
        }, HTMLElement>;
        renderPolarAxis: (element: any, displayName: string, index: number) => import("react").DetailedReactHTMLElement<{
            className: any;
            key: any;
            ticks: import("recharts/types/util/types").TickItem[];
            type?: "number" | "category";
            dataKey?: import("recharts/types/util/types").DataKey<any>;
            hide?: boolean;
            scale?: Function | "auto" | "linear" | "pow" | "sqrt" | "log" | "identity" | "time" | "band" | "point" | "ordinal" | "quantile" | "quantize" | "utc" | "sequential" | "threshold";
            tick?: boolean | import("react").SVGProps<SVGTextElement> | import("react").ReactElement<SVGElement, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)> | ((props: any) => import("react").ReactElement<SVGElement, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>);
            tickCount?: number;
            axisLine?: boolean | import("react").SVGProps<SVGLineElement>;
            tickLine?: boolean | import("react").SVGProps<SVGTextElement>;
            tickSize?: number;
            tickFormatter?: (value: any, index: number) => string;
            allowDataOverflow?: boolean;
            allowDuplicatedCategory?: boolean;
            allowDecimals?: boolean;
            domain?: import("recharts/types/util/types").AxisDomain;
            includeHidden?: boolean;
            name?: string;
            unit?: string | number;
            axisType?: import("recharts/types/util/types").AxisType;
            range?: number[];
            AxisComp?: any;
            label?: string | number | object | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        }, HTMLElement>;
        renderXAxis: (element: any, displayName: string, index: number) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderYAxis: (element: any, displayName: string, index: number) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderAxis(axisOptions: import("recharts/types/util/types").BaseAxisProps, element: any, displayName: string, index: number): import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderGrid: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderPolarGrid: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderLegend: () => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderTooltip: () => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderBrush: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderReferenceElement: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>, displayName: string, index: number) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>[];
        renderGraphicChild: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>, displayName: string, index: number) => any[];
        renderCustomized: (element: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>, displayName: string, index: number) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
        renderClipPath(): import("react").JSX.Element;
        getXScales(): {
            [x: string]: Function | "auto" | "linear" | "pow" | "sqrt" | "log" | "identity" | "time" | "band" | "point" | "ordinal" | "quantile" | "quantize" | "utc" | "sequential" | "threshold";
        };
        getYScales(): {
            [x: string]: Function | "auto" | "linear" | "pow" | "sqrt" | "log" | "identity" | "time" | "band" | "point" | "ordinal" | "quantile" | "quantize" | "utc" | "sequential" | "threshold";
        };
        getXScaleByAxisId(axisId: string): Function | "auto" | "linear" | "pow" | "sqrt" | "log" | "identity" | "time" | "band" | "point" | "ordinal" | "quantile" | "quantize" | "utc" | "sequential" | "threshold";
        getYScaleByAxisId(axisId: string): Function | "auto" | "linear" | "pow" | "sqrt" | "log" | "identity" | "time" | "band" | "point" | "ordinal" | "quantile" | "quantize" | "utc" | "sequential" | "threshold";
        getItemByXY(chartXY: {
            x: number;
            y: number;
        }): {
            graphicalItem: any;
            payload: any;
        };
        render(): import("react").JSX.Element;
        context: any;
        setState<K extends "offset" | "activeIndex" | "prevData" | "prevWidth" | "updateId" | "graphicalItems" | "dataStartIndex" | "dataEndIndex" | "chartX" | "chartY" | "activeTooltipIndex" | "isTooltipActive" | "xAxisMap" | "yAxisMap" | "zAxisMap" | "orderedTooltipTicks" | "tooltipAxis" | "tooltipTicks" | "activeCoordinate" | "angleAxisMap" | "radiusAxisMap" | "formattedGraphicalItems" | "activePayload" | "tooltipAxisBandSize" | "activeItem" | "activeLabel" | "xValue" | "yValue" | "legendBBox" | "prevHeight" | "prevLayout" | "prevStackOffset" | "prevMargin" | "prevChildren" | "stackGroups">(state: import("recharts/types/chart/generateCategoricalChart").CategoricalChartState | ((prevState: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState>, props: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>) => import("recharts/types/chart/generateCategoricalChart").CategoricalChartState | Pick<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState, K>) | Pick<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>, nextState: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>, nextState: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps>, nextState: Readonly<import("recharts/types/chart/generateCategoricalChart").CategoricalChartState>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps;
    getDerivedStateFromProps: (nextProps: import("recharts/types/chart/generateCategoricalChart").CategoricalChartProps, prevState: import("recharts/types/chart/generateCategoricalChart").CategoricalChartState) => import("recharts/types/chart/generateCategoricalChart").CategoricalChartState;
    renderActiveDot: (option: any, props: any) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
    contextType?: import("react").Context<any>;
};
